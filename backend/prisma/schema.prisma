// backend/prisma/schema.prisma - AVEC SYSTÃˆME D'ABONNEMENT RÃ”LES

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  discordId     String    @unique @map("discord_id")
  email         String?
  username      String
  avatar        String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  ownedServers  Server[]  @relation("ServerOwner")
  orders        Order[]
  subscriptions RoleSubscription[]  // ðŸ†• NOUVEAU
  
  @@map("users")
}

enum SubscriptionTier {
  FREE
  STARTER
  PRO
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  EXPIRED
}

model Server {
  id                    String              @id @default(uuid())
  discordServerId       String              @unique @map("discord_server_id")
  shopName              String              @map("shop_name")
  description           String?
  ownerId               String              @map("owner_id")
  
  // Stripe Configuration
  stripeAccountId       String?             @unique @map("stripe_account_id")
  stripePublicKey       String?             @map("stripe_public_key")
  stripeSecretKey       String?             @map("stripe_secret_key")
  
  // Subscription
  subscriptionTier      SubscriptionTier    @default(FREE) @map("subscription_tier")
  subscriptionStatus    SubscriptionStatus  @default(ACTIVE) @map("subscription_status")
  commissionRate        Float               @default(5.0) @map("commission_rate")
  stripeSubscriptionId  String?             @unique @map("stripe_subscription_id")
  subscriptionExpiresAt DateTime?           @map("subscription_expires_at")
  
  // Apparence
  primaryColor          String?             @default("#7C3AED") @map("primary_color")
  
  // Notifications Discord
  webhookUrl            String?             @map("webhook_url")
  notifyOnSale          Boolean             @default(false) @map("notify_on_sale")
  
  // Status
  active                Boolean             @default(true)
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")

  owner                 User                @relation("ServerOwner", fields: [ownerId], references: [id])
  products              Product[]
  orders                Order[]
  roleSubscriptions     RoleSubscription[]  // ðŸ†• NOUVEAU
  
  @@map("servers")
}

enum ProductType {
  PDF
  SERIAL
  ROLE
}

model Product {
  id                  String      @id @default(uuid())
  serverId            String      @map("server_id")
  name                String
  description         String
  price               Float
  type                ProductType
  
  imageUrl            String?     @map("image_url")
  fileUrl             String?     @map("file_url")
  discordRoleId       String?     @map("discord_role_id")
  bonusRoleId         String?     @map("bonus_role_id")
  serialCredentials   String?     @map("serial_credentials")
  
  // ðŸ†• NOUVEAU : Configuration abonnement rÃ´les
  roleDuration              Int?      @map("role_duration")                // DurÃ©e en jours (14, 30, etc.) | -1 = Lifetime
  roleAutoRenew             Boolean   @default(false) @map("role_auto_renew")  // Renouvellement auto
  roleRequiresSubscription  Boolean   @default(false) @map("role_requires_subscription")  // Forcer abonnement
  roleGracePeriodDays       Int?      @map("role_grace_period_days")     // PÃ©riode de grÃ¢ce en jours (3, 7, 14)
  
  stock               Int?        @default(0)
  salesCount          Int         @default(0) @map("sales_count")
  active              Boolean     @default(true)
  
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")

  server              Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  orders              Order[]
  subscriptions       RoleSubscription[]  // ðŸ†• NOUVEAU
  
  @@map("products")
  @@index([serverId])
}

enum OrderStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

model Order {
  id                      String      @id @default(uuid())
  serverId                String      @map("server_id")
  buyerId                 String      @map("buyer_id")
  productId               String      @map("product_id")
  stripePaymentIntentId   String?     @unique @map("stripe_payment_intent_id")
  stripeSubscriptionId    String?     @map("stripe_subscription_id")  // ðŸ†• NOUVEAU
  status                  OrderStatus @default(PENDING)
  amount                  Float
  commissionAmount        Float       @map("commission_amount")
  deliveryData            String?     @map("delivery_data")
  delivered               Boolean     @default(false)
  deliveredAt             DateTime?   @map("delivered_at")
  createdAt               DateTime    @default(now()) @map("created_at")
  updatedAt               DateTime    @updatedAt @map("updated_at")

  server                  Server      @relation(fields: [serverId], references: [id])
  buyer                   User        @relation(fields: [buyerId], references: [id])
  product                 Product     @relation(fields: [productId], references: [id])
  
  @@map("orders")
  @@index([serverId])
  @@index([buyerId])
  @@index([status])
}

// ðŸ†• NOUVEAU : Table pour gÃ©rer les abonnements aux rÃ´les
enum RoleSubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
}

model RoleSubscription {
  id                      String                  @id @default(uuid())
  serverId                String                  @map("server_id")
  userId                  String                  @map("user_id")
  productId               String                  @map("product_id")
  stripeSubscriptionId    String                  @unique @map("stripe_subscription_id")
  status                  RoleSubscriptionStatus  @default(ACTIVE)
  currentPeriodStart      DateTime                @map("current_period_start")
  currentPeriodEnd        DateTime                @map("current_period_end")
  cancelAtPeriodEnd       Boolean                 @default(false) @map("cancel_at_period_end")
  createdAt               DateTime                @default(now()) @map("created_at")
  updatedAt               DateTime                @updatedAt @map("updated_at")

  server                  Server                  @relation(fields: [serverId], references: [id])
  user                    User                    @relation(fields: [userId], references: [id])
  product                 Product                 @relation(fields: [productId], references: [id])
  
  @@map("role_subscriptions")
  @@index([serverId])
  @@index([userId])
  @@index([status])
  @@index([currentPeriodEnd])
}

model Transaction {
  id                  String    @id @default(uuid())
  serverId            String    @map("server_id")
  orderId             String?   @map("order_id")
  type                String
  amount              Float
  commissionAmount    Float     @map("commission_amount")
  stripeTransferId    String?   @unique @map("stripe_transfer_id")
  metadata            String?
  createdAt           DateTime  @default(now()) @map("created_at")

  @@map("transactions")
  @@index([serverId])
  @@index([type])
  @@index([createdAt])
}