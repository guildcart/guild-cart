// bot/src/services/deliveryService.ts
// ‚úÖ CORRIG√â : ACCOUNT remplac√© par SERIAL

import { Client, EmbedBuilder, AttachmentBuilder } from 'discord.js';
import { logger } from '../utils/logger';
import { apiClient } from '../utils/apiClient';
import { sendEmail } from './emailService';
import axios from 'axios';

export async function deliverProduct(
  client: Client,
  data: {
    orderId: string;
    userId: string;
    productId: string;
    productType: string;
    deliveryData: any;
  }
) {
  const { orderId, userId, productId, productType, deliveryData } = data;

  try {
    const user = await client.users.fetch(userId);
    const product = await apiClient.getProduct(productId);

    let dmSent = false;
    let emailSent = false;

    try {
      await sendDM(user, product, productType, deliveryData);
      dmSent = true;
      logger.info(`‚úÖ Produit livr√© en DM √† ${user.tag}`);
    } catch (error: any) {
      logger.warn(`‚ö†Ô∏è Impossible d'envoyer en DM √† ${user.tag}:`, error.message);
      
      if (error.code === 50007 || error.message.includes('Cannot send messages')) {
        try {
          await sendEmailDelivery(user, product, productType, deliveryData);
          emailSent = true;
          logger.info(`üìß Produit livr√© par email √† ${user.tag}`);
        } catch (emailError) {
          logger.error('Erreur lors de l\'envoi par email:', emailError);
          throw new Error('Impossible de livrer le produit (DM et email √©chou√©s)');
        }
      } else {
        throw error;
      }
    }

    await apiClient.markOrderAsDelivered(orderId, JSON.stringify({
      dmSent,
      emailSent,
      deliveredAt: new Date().toISOString(),
    }));

    return { success: true, dmSent, emailSent };
  } catch (error) {
    logger.error('Erreur lors de la livraison du produit:', error);
    throw error;
  }
}

async function sendDM(
  user: any,
  product: any,
  productType: string,
  deliveryData: any
) {
  const embed = new EmbedBuilder()
    .setColor(0x00FF00)
    .setTitle('‚úÖ Achat confirm√© !')
    .setDescription(`Merci pour ton achat de **${product.name}** !`)
    .setTimestamp();

  let files: AttachmentBuilder[] = [];

  switch (productType) {
    case 'PDF':
      if (product.fileUrl) {
        embed.addFields({
          name: 'üìÑ Fichier PDF',
          value: 'Ton fichier est joint √† ce message.',
        });

        try {
          const response = await axios.get(product.fileUrl, {
            responseType: 'arraybuffer',
          });
          const buffer = Buffer.from(response.data);
          const attachment = new AttachmentBuilder(buffer, {
            name: `${product.name}.pdf`,
          });
          files.push(attachment);
        } catch (error) {
          logger.error('Erreur lors du t√©l√©chargement du PDF:', error);
          embed.addFields({
            name: 'üîó Lien de t√©l√©chargement',
            value: product.fileUrl,
          });
        }
      }
      break;

    case 'SERIAL':  // ‚úÖ SERIAL au lieu de ACCOUNT
      if (deliveryData) {
        // ‚úÖ Format nouveau : Array de strings
        const serialInfo = typeof deliveryData === 'string' 
          ? JSON.parse(deliveryData) 
          : deliveryData;

        // Si c'est un array de strings (nouveau format)
        if (Array.isArray(serialInfo) && typeof serialInfo[0] === 'string') {
          embed.addFields({
            name: 'üîë Ton Serial / Cl√©',
            value: '```' + serialInfo[0] + '```',
          });
        }
        // R√©trocompatibilit√© ancien format login:password
        else if (serialInfo.login && serialInfo.password) {
          embed.addFields({
            name: 'üîë Informations de connexion',
            value: '```' + 
              `Login: ${serialInfo.login}\n` +
              `Password: ${serialInfo.password}` +
              '```',
          });
        }
        
        embed.addFields({
          name: '‚ö†Ô∏è Important',
          value: 'Garde ces informations en s√©curit√©. Ne les partage avec personne.',
        });
      }
      break;

    case 'ROLE':
      embed.addFields({
        name: 'üëë R√¥le Discord',
        value: `Le r√¥le a √©t√© automatiquement ajout√© √† ton compte !\nTu peux maintenant acc√©der aux salons VIP.`,
      });
      break;
  }

  embed.setFooter({ 
    text: 'Support disponible ‚Ä¢ Utilise /inventory pour revoir tes achats' 
  });

  await user.send({ 
    embeds: [embed],
    files: files.length > 0 ? files : undefined,
  });
}

async function sendEmailDelivery(
  user: any,
  product: any,
  productType: string,
  deliveryData: any
) {
  let emailContent = `
    <h2>‚úÖ Achat confirm√© !</h2>
    <p>Merci pour ton achat de <strong>${product.name}</strong> !</p>
  `;

  switch (productType) {
    case 'PDF':
      emailContent += `
        <p>üìÑ <strong>Fichier PDF :</strong></p>
        <p><a href="${product.fileUrl}" style="background-color: #5865F2; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">T√©l√©charger le fichier</a></p>
      `;
      break;

    case 'SERIAL':  // ‚úÖ SERIAL au lieu de ACCOUNT
      if (deliveryData) {
        const serialInfo = typeof deliveryData === 'string' 
          ? JSON.parse(deliveryData) 
          : deliveryData;

        if (Array.isArray(serialInfo) && typeof serialInfo[0] === 'string') {
          emailContent += `
            <p>üîë <strong>Ton serial / cl√© :</strong></p>
            <div style="background-color: #f0f0f0; padding: 15px; border-radius: 5px; font-family: monospace;">
              ${serialInfo[0]}
            </div>
            <p>‚ö†Ô∏è <strong>Important :</strong> Garde cette cl√© en s√©curit√©.</p>
          `;
        } else if (serialInfo.login && serialInfo.password) {
          emailContent += `
            <p>üîë <strong>Informations de connexion :</strong></p>
            <div style="background-color: #f0f0f0; padding: 15px; border-radius: 5px; font-family: monospace;">
              <strong>Login:</strong> ${serialInfo.login}<br>
              <strong>Password:</strong> ${serialInfo.password}
            </div>
            <p>‚ö†Ô∏è <strong>Important :</strong> Garde ces informations en s√©curit√©.</p>
          `;
        }
      }
      break;

    case 'ROLE':
      emailContent += `
        <p>üëë Le r√¥le Discord a √©t√© automatiquement ajout√© √† ton compte !</p>
        <p>Connecte-toi √† Discord pour acc√©der aux salons VIP.</p>
      `;
      break;
  }

  emailContent += `
    <hr>
    <p style="color: #888; font-size: 12px;">
      ‚ÑπÔ∏è Ce produit a √©t√© envoy√© par email car tes messages priv√©s Discord sont d√©sactiv√©s.<br>
      Pour recevoir les prochains achats en DM, active les messages priv√©s sur Discord.
    </p>
  `;

  await sendEmail({
    to: user.email || `${user.id}@discord-fallback.com`,
    subject: `‚úÖ Ton achat : ${product.name}`,
    html: emailContent,
  });
}