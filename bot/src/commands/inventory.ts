import { SlashCommandBuilder, EmbedBuilder, ChatInputCommandInteraction } from 'discord.js';
import { apiClient } from '../utils/apiClient';
import { logger } from '../utils/logger';

export const data = new SlashCommandBuilder()
  .setName('inventory')
  .setDescription('Voir tes achats');

export async function execute(interaction: ChatInputCommandInteraction) {
  await interaction.deferReply({ ephemeral: true });

  try {
    // R√©cup√©rer les commandes de l'utilisateur
    const orders = await apiClient.getUserOrders(interaction.user.id);

    if (!orders || orders.length === 0) {
      return interaction.editReply({
        content: 'üì¶ Ton inventaire est vide.\n\nUtilise `/shop` pour voir les produits disponibles !',
      });
    }

    const embed = new EmbedBuilder()
      .setColor(0x5865F2)
      .setTitle('üì¶ Ton Inventaire')
      .setDescription('Retrouve tous tes achats ici')
      .setThumbnail(interaction.user.displayAvatarURL())
      .setFooter({ text: `${orders.length} achat(s) au total` })
      .setTimestamp();

    // Grouper par statut
    const completedOrders = orders.filter((o: any) => o.status === 'COMPLETED');
    const pendingOrders = orders.filter((o: any) => o.status === 'PENDING');

    if (completedOrders.length > 0) {
      const ordersList = completedOrders.slice(0, 10).map((order: any) => {
        const emoji = order.product.type === 'PDF' ? 'üìÑ' : 
                     order.product.type === 'ROLE' ? 'üëë' : 'üîë';
        const date = new Date(order.createdAt).toLocaleDateString('fr-FR');
        return `${emoji} **${order.product.name}** - ${date}`;
      }).join('\n');

      embed.addFields({
        name: '‚úÖ Achats livr√©s',
        value: ordersList,
        inline: false,
      });
    }

    if (pendingOrders.length > 0) {
      const pendingList = pendingOrders.map((order: any) => {
        return `‚è≥ **${order.product.name}** - En cours...`;
      }).join('\n');

      embed.addFields({
        name: '‚è≥ En attente',
        value: pendingList,
        inline: false,
      });
    }

    embed.addFields({
      name: '‚ÑπÔ∏è Info',
      value: 'Les produits sont livr√©s en DM priv√©.\nSi tu ne les as pas re√ßus, v√©rifie tes messages ou contacte le support.',
      inline: false,
    });

    await interaction.editReply({ embeds: [embed] });

    logger.info(`Inventaire consult√© par ${interaction.user.tag}`);
  } catch (error) {
    logger.error('Erreur dans la commande /inventory:', error);
    await interaction.editReply({
      content: '‚ùå Erreur lors de la r√©cup√©ration de ton inventaire.',
    });
  }
}